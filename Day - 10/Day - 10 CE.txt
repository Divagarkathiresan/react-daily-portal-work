//Day - 10
//Form.js
import React, { useState } from 'react';

const Form = ({ onSubmit }) => {
    const [form, setForm] = useState({ name: '', email: '', message: '' });
    const [errors, setErrors] = useState({});

    const handleChange = (e) => {
        const { name, value } = e.target;
        setForm({ ...form, [name]: value });
    };

    const validate = () => {
        let tempErrors = {};
        if (!form.name) tempErrors.name = 'Name is required';
        if (!form.email) tempErrors.email = 'Email is required';
        if (!form.message) tempErrors.message = 'Message is required';
        setErrors(tempErrors);
        return Object.keys(tempErrors).length === 0;
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (validate()) {
            onSubmit(form);
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <div>
                <label>Name</label>
                <input type="text" name="name" value={form.name} onChange={handleChange} />
                {errors.name && <div>{errors.name}</div>}
            </div>
            <div>
                <label>Email</label>
                <input type="email" name="email" value={form.email} onChange={handleChange} />
                {errors.email && <div>{errors.email}</div>}
            </div>
            <div>
                <label>Message</label>
                <textarea name="message" value={form.message} onChange={handleChange} />
                {errors.message && <div>{errors.message}</div>}
            </div>
            <button type="submit">Submit</button>
        </form>
    );
};

export default Form;

//Form.test.js
import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Form from '../Form';

test('displays name when entered', () => {
    render(<Form onSubmit={jest.fn()} />);
    const input = screen.getByLabelText(/name/i);
    fireEvent.change(input, { target: { value: 'John Doe' } });
    expect(input.value).toBe('John Doe');
});

test('displays email when entered', () => {
    render(<Form onSubmit={jest.fn()} />);
    const input = screen.getByLabelText(/email/i);
    fireEvent.change(input, { target: { value: 'john@example.com' } });
    expect(input.value).toBe('john@example.com');
});

test('displays message when entered', () => {
    render(<Form onSubmit={jest.fn()} />);
    const textarea = screen.getByLabelText(/message/i);
    fireEvent.change(textarea, { target: { value: 'Hello, this is a message.' } });
    expect(textarea.value).toBe('Hello, this is a message.');
});

test('calls onSubmit with correct user information', () => {
    const handleSubmit = jest.fn();
    render(<Form onSubmit={handleSubmit} />);

    fireEvent.change(screen.getByLabelText(/name/i), { target: { value: 'John Doe' } });
    fireEvent.change(screen.getByLabelText(/email/i), { target: { value: 'john@example.com' } });
    fireEvent.change(screen.getByLabelText(/message/i), { target: { value: 'Hello, this is a message.' } });

    fireEvent.click(screen.getByText(/submit/i));
    expect(handleSubmit).toHaveBeenCalledWith({
        name: 'John Doe',
        email: 'john@example.com',
        message: 'Hello, this is a message.'
    });
});

test('shows error when required fields are empty', () => {
    render(<Form onSubmit={jest.fn()} />);
    fireEvent.click(screen.getByText(/submit/i));

    expect(screen.getByText(/name is required/i)).toBeInTheDocument();
    expect(screen.getByText(/email is required/i)).toBeInTheDocument();
    expect(screen.getByText(/message is required/i)).toBeInTheDocument();
});